// Generated by CoffeeScript 1.9.3
(function() {
  var app, root;

  app = {};

  app.storage = new MyStorage();

  app.session = null;

  app.destination = null;

  app.DictionaryView = Backbone.View.extend({
    tagName: "div",
    initialize: function(data) {
      this.template = _.template($("#ext-dictionary-t").html());
      return this.$el.html(this.template({
        data: data
      }));
    },
    renderData: function(data) {
      var finalHeight;
      this.$el.html(this.template({
        data: data
      }));
      finalHeight = this.$el.height();
      this.$el.css("height", "20px");
      this.$el.animate({
        "height": finalHeight
      }, "slow");
      this.$popovers = this.$('[data-toggle="popover"]');
      return this.initPopover();
    },
    events: {
      "click .remove": "remove",
      "mouseleave": function() {
        return this.$popovers.popover('hide');
      },
      "mouseover [data-toggle='popover']": function(e) {
        return $(e.currentTarget).popover('show');
      },
      "show.bs.popover [data-toggle='popover']": function(e) {
        return this.$popovers.not($(e.currentTarget)).popover('hide');
      },
      "click .suggestion": function(e) {
        app.appView.$("#ext-word").val($(e.currentTarget).text());
        return app.appView.renderDictionaries();
      }
    },
    initPopover: function() {
      return this.$popovers.each(function() {
        var $popoverContent;
        $popoverContent = $(this).next().remove();
        $popoverContent.find(".meaning").click(function() {
          return app.appView.$("#ext-meaning").val($(this).text());
        });
        return $(this).popover({
          content: $popoverContent
        });
      });
    }
  });

  app.AppView = Backbone.View.extend({
    initialize: function() {
      this.$el.html(_.template($("#ext-content-t").html())({}));
      app.storage.init();
      app.storage.on("update", (function(_this) {
        return function(data) {
          app.session = data.session;
          return app.destination = data.destination;
        };
      })(this));
      return $('body').dblclick((function(_this) {
        return function(e) {
          var s, w;
          w = window.getSelection().toString().trim();
          s = window.getSelection().getRangeAt(0).startContainer.parentNode.textContent.trim();
          _this.$("#ext-word").val((_this.$("#ext-word").val() + " " + w).trim()).focus();
          _this.$("#ext-sentence").val(s);
          return _this.renderDictionaries();
        };
      })(this));
    },
    events: {
      "keypress #ext-word": function(e) {
        if (e.which === 13) {
          return this.renderDictionaries();
        }
      },
      "click #upload": function() {
        return this.upload();
      }
    },
    renderDictionaries: function() {
      var word;
      word = this.$("#ext-word").val().trim();
      if (word !== "") {
        this.renderEijiro(word);
        return this.renderMarriam(word);
      }
    },
    renderEijiro: function(word) {
      if (this.eijiroView != null) {
        this.eijiroView.remove();
      }
      this.eijiroView = new app.DictionaryView({
        dictionary: "Eijiro",
        type: "",
        loading: true
      });
      this.$("#ext-dictionaries").append(this.eijiroView.$el);
      return extLib.Eijiro(word)["catch"](function(err) {
        return console.log("error in eijiro: " + err);
      }).then((function(_this) {
        return function(data) {
          return _this.eijiroView.renderData(data);
        };
      })(this));
    },
    renderMarriam: function(word) {
      if (this.marriamView != null) {
        this.marriamView.remove();
      }
      this.marriamView = new app.DictionaryView({
        dictionary: "Merriam-Webster",
        type: "",
        loading: true
      });
      this.$("#ext-dictionaries").append(this.marriamView.$el);
      return extLib.DictionaryAPI(word)["catch"](function(err) {
        return console.log("error in dicAPI: " + err);
      }).then((function(_this) {
        return function(data) {
          return _this.marriamView.renderData(data);
        };
      })(this));
    },
    upload: function() {
      return extLib.tabCapture()["catch"](function(err) {
        return console.log("error - AppView.upload: " + err);
      }).then((function(_this) {
        return function(dataurl) {
          return chrome.runtime.sendMessage({
            type: "uploadItem",
            category_id: app.destination.id,
            word: _this.$("#ext-word").val(),
            sentence: _this.$("#ext-sentence").val(),
            meaning: _this.$("#ext-meaning").val(),
            picture: dataurl,
            headers: {
              Authorization: app.session.auth_token
            }
          }, function(resp) {
            return console.log(resp);
          });
        };
      })(this));
    }
  });

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.app = app;

}).call(this);
