// Generated by CoffeeScript 1.9.3
(function() {
  var MyStorage, root;

  MyStorage = Backbone.Model.extend({
    initialize: function() {
      return this.items = {};
    },
    fetch: function() {
      return this.get();
    },
    update: function(items) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          chrome.storage.sync.set(items, function() {
            _(_this.items).extend(items);
            _this.trigger("update", _this.items);
            return resolve(_this.items);
          });
          return setTimeout((function() {
            return reject("lib.storageSet timeout");
          }), 1000);
        };
      })(this));
    },
    get: function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          chrome.storage.sync.get(function(items) {
            _(_this.items).extend(items);
            return resolve(items);
          });
          return setTimeout((function() {
            return reject("lib.storageGet timeout");
          }), 1000);
        };
      })(this));
    }
  });

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.MyStorage = MyStorage;

}).call(this);
