// Generated by CoffeeScript 1.9.3
(function() {
  var app;

  app = {};


  /* storage for authentication */

  app.storage = new MyStorage();

  app.User = Backbone.Model.extend({
    parse: function(response) {
      return response.user;
    },
    urlRoot: "http://localhost:3000/api/users"
  });

  app.user = new app.User;


  /* before authentication */

  app.loginView = Backbone.View.extend({
    initialize: function() {
      this.$el.html(_.template($("#loginView-t").html())({}));
      this.$("#loginForm input:eq(0)").val("hiogawa@hiogawa.com");
      return this.$("#loginForm input:eq(1)").val("12345678");
    },
    events: {
      "submit #loginForm": function(e) {
        e.preventDefault();
        return Promise.resolve($.ajax({
          url: "http://localhost:3000/api/sessions",
          type: "POST",
          data: this.$("#loginForm").serialize()
        })).then((function(_this) {
          return function(data) {
            return app.storage.update({
              session: data
            });
          };
        })(this))["catch"]((function(_this) {
          return function(err) {
            return app.mainView.renderFlashMessage("Error happend. Try again.");
          };
        })(this));
      },
      "click #register": function(e) {
        return extLib.createTab("http://localhost:9000/login");
      }
    }
  });


  /* after authentication */

  app.authedView = Backbone.View.extend({
    initialize: function() {
      return this.$el.html(_.template($("#authedView-t").html())({
        user: this.model.toJSON()
      }));
    },
    events: {
      "click #on": function(e) {
        return chrome.tabs.query({
          active: true,
          currentWindow: true
        }, function(tabs) {
          return chrome.tabs.sendMessage(tabs[0].id, {
            type: "popup#appOn"
          });
        });
      },
      "click #off": function(e) {
        return chrome.tabs.query({
          active: true,
          currentWindow: true
        }, function(tabs) {
          return chrome.tabs.sendMessage(tabs[0].id, {
            type: "popup#appOff"
          });
        });
      },
      "click #logout": function(e) {
        return app.storage.clear();
      }
    }
  });


  /* main view */

  app.MainView = Backbone.View.extend({
    initialize: function() {
      $("#flash").hide();
      app.storage.init();
      app.storage.on("update", (function(_this) {
        return function(data) {
          if ((data != null) && (data.session != null) && (data.session.id != null) && (data.session.auth_token != null)) {
            return app.user.set({
              id: data.session.id
            }).fetch({
              headers: {
                Authorization: data.session.auth_token
              }
            });
          } else {
            _this.renderFlashMessage("You need to login.");
            return _this.renderLoginView();
          }
        };
      })(this));
      app.user.on("sync", (function(_this) {
        return function() {
          _this.renderFlashMessage("You are already logged in.");
          return _this.renderAuthedView(app.user);
        };
      })(this));
      return app.user.on("error", (function(_this) {
        return function() {
          _this.renderFlashMessage("Error happened. Try to login again.");
          return _this.renderLoginView();
        };
      })(this));
    },
    renderLoginView: function() {
      return this.$el.html(new app.loginView().$el);
    },
    renderAuthedView: function(user) {
      return this.$el.html(new app.authedView({
        model: user
      }).$el);
    },
    renderFlashMessage: function(message) {
      return $("#flash").text(message).show();
    }
  });

  app.mainView = null;

  $(function() {
    return app.mainView = new app.MainView({
      el: $("#main")
    });
  });

}).call(this);
